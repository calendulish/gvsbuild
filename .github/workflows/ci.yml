on:
  push:
    branches: [main]
  pull_request:
  release:
    types: [published]
  workflow_dispatch:

env:
  python_version: '3.11'
  poetry_version: '1.2.2'

name: CI

jobs:

  lint:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    if: "!contains(github.event.head_commit.message, 'skip ci')"
    steps:
      - uses: actions/checkout@v3.3.0
        with:
          ref: ${{ github.event.pull_request.head.sha }}
      - name: Set up Python
        uses: actions/setup-python@v4.4.0
        with:
          python-version: ${{ env.python_version }}
      - name: Lint with Pre-commit
        uses: pre-commit/action@v3.0.0

  test:
    needs: lint
    name: Test with Python ${{ matrix.python-version }}
    strategy:
      matrix:
        python-version: ['3.10', '3.11']
    runs-on: windows-latest
    timeout-minutes: 60
    if: "!contains(github.event.head_commit.message, 'skip ci')"
    steps:
      - name: Checkout
        uses: actions/checkout@v3.3.0
        with:
          ref: ${{ github.event.pull_request.head.sha }}
      - name: Set up Python
        uses: actions/setup-python@v4.4.0
        with:
          python-version: ${{ matrix.python-version }}
      - name: Use Python Dependency Cache
        uses: actions/cache@v3.2.3
        with:
          path: ~\AppData\Local\pip\Cache
          key: ${{ runner.os }}-poetry-${{ hashFiles('**/poetry.lock') }}
          restore-keys: ${{ runner.os }}-poetry-
      - name: Install Poetry
        run: python -m pip install poetry==${{ env.poetry_version }}
      - name: Configure Poetry
        run: poetry config virtualenvs.in-project true
      - name: Install Python Dependencies
        run: poetry install
      - name: Install dependencies
        run: |
          pip install tox tox-gh-actions
      # Temporarily move the preinstalled git, it causes errors related to cygwin.
      - name: Move git binary
        run: |
          Move-Item "C:\Program Files\Git\usr\bin" "C:\Program Files\Git\usr\notbin"
          Move-Item "C:\Program Files\Git\bin" "C:\Program Files\Git\notbin"
      - name: Test with tox
        run: tox
      - name: Restore git binary
        run: |
          Move-Item "C:\Program Files\Git\usr\notbin" "C:\Program Files\Git\usr\bin"
          Move-Item "C:\Program Files\Git\notbin" "C:\Program Files\Git\bin"

  build:
    needs: lint
    name: Build GTK Binaries
    runs-on: windows-latest
    timeout-minutes: 75
    if: "!contains(github.event.head_commit.message, 'skip ci')"
    strategy:
      matrix:
        gtk-version: ['4']

    steps:
      - name: Checkout
        uses: actions/checkout@v3.3.0
        with:
          ref: ${{ github.event.pull_request.head.sha }}
      - name: Set up Python
        uses: actions/setup-python@v4.4.0
        with:
          python-version: ${{ env.python_version }}
      - name: Use Python Dependency Cache
        uses: actions/cache@v3.2.3
        with:
          path: ~\AppData\Local\pip\Cache
          key: ${{ runner.os }}-poetry-${{ hashFiles('**/poetry.lock') }}
          restore-keys: ${{ runner.os }}-poetry-
      - name: Install Poetry
        run: python -m pip install poetry==${{ env.poetry_version }}
      - name: Configure Poetry
        run: poetry config virtualenvs.in-project true
      - name: Install Python Dependencies
        run: poetry install
      # Temporarily move the preinstalled git, it causes errors related to cygwin.
      - name: Move git binary
        run: |
          Move-Item "C:\Program Files\Git\usr\bin" "C:\Program Files\Git\usr\notbin"
          Move-Item "C:\Program Files\Git\bin" "C:\Program Files\Git\notbin"
      - name: Build GTK3
        if: matrix.gtk-version == '3'
        run: >
          poetry run gvsbuild build --ninja-opts -j2 gtk3 gtksourceview4 graphene
          glib-networking
      - name: Build GTK4
        if: matrix.gtk-version == '4'
        run: > # Use -j2 option to prevent out of memory errors with GitHub Action runners
          poetry run gvsbuild build --platform=x64 --ninja-opts -j2 --enable-gi glib librsvg libpng gdk-pixbuf gtk4 pygobject
      - name: Restore git binary
        run: |
          Move-Item "C:\Program Files\Git\usr\notbin" "C:\Program Files\Git\usr\bin"
          Move-Item "C:\Program Files\Git\notbin" "C:\Program Files\Git\bin"

      - name: Zip Bundle
        run: >
          7z a
          ${{ github.workspace }}/Release.zip
          "C:\gtk-build\gtk\x64\release"

      - name: Release
        uses: softprops/action-gh-release@v1
        with:
          name: latest
          tag_name: latest
          body: gvsbuild-release
          files: "*.zip"
